name: Deploy

on: 
  workflow_dispatch:

jobs:
  job-linux:
    runs-on: ubuntu-latest

    steps:
    - uses: subosito/flutter-action@v2.6.1
      with:
        channel: 'stable'
        architecture: x64

    - uses: actions/checkout@v2
      with:
        lfs: 'true'

    - name: Update dependencies
      run: | 
        flutter config --enable-linux-desktop

        flutter doctor
        sudo apt-get update -y
        sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev libblkid-dev tree
        flutter doctor

        flutter pub get

    - name: Generate app build name
      shell: bash
      run: echo "##[set-output name=name;]$(echo sweet_$GITHUB_RUN_NUMBER)"
      id: app_build

    - name: Building ${{ steps.app_build.outputs.name }} Linux
      run: flutter build linux --release --verbose

    - name: 'Zipping build'
      run: |
        pushd build/linux/x64/release/bundle/
        zip -r ${{ steps.app_build.outputs.name }}-linux.zip ./*
        popd
        mv build/linux/x64/release/bundle/${{ steps.app_build.outputs.name }}-linux.zip ./${{ steps.app_build.outputs.name }}-linux.zip

    - name: 'Uploading artifact'
      uses: actions/upload-artifact@v2.2.3
      with:
        name: ${{ steps.app_build.outputs.name }}-linux
        path: ${{ steps.app_build.outputs.name }}-linux.zip
        retention-days: 5

  # WINDOWS 
  job-windows:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with:
        lfs: 'true'

    - uses: subosito/flutter-action@v2.6.1
      with:
        channel: 'stable'
        architecture: x64

    - name: Update dependencies
      run: | 
        flutter config --enable-windows-desktop
        flutter pub get

    - name: Generate app build name
      shell: bash
      run: echo "##[set-output name=name;]$(echo sweet_$GITHUB_RUN_NUMBER)"
      id: app_build

    - name: Update Windows build number
      shell: bash
      run: |
        VERSION_FROM_PUBSPEC=$(sed -n -e '/version: / s///p' pubspec.yaml | tr -d '\r\n')
        VERSION=$(echo -n $VERSION_FROM_PUBSPEC | sed -E -e "s/((([0-9])+\.([0-9])+\.([0-9])+)\+(([0-9])+))/\2+$GITHUB_RUN_NUMBER/")

        echo "Setting windows version to $VERSION"
        sed -i -E -e "s/((([0-9])+\.([0-9])+\.([0-9])+(([\+])([0-9])+)?))/$VERSION/" windows/runner/Runner.rc


    - name: Building ${{ steps.app_build.outputs.name }} Windows
      run: flutter build windows --release

    - name: 'Zipping build'
      uses: vimtor/action-zip@v1
      with:
        dest: ${{ steps.app_build.outputs.name }}-windows.zip
        files: build/windows/runner/Release

    - name: 'Uploading artifact'
      uses: actions/upload-artifact@v2.2.3
      with:
        name: ${{ steps.app_build.outputs.name }}-windows
        path: ${{ steps.app_build.outputs.name }}-windows.zip
        retention-days: 5
        
  job-apple:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
      with:
        lfs: 'true'

    - uses: subosito/flutter-action@v2.6.1
      with:
        channel: 'stable'
        architecture: x64

    - name: Update dependencies
      run: | 
        flutter config --enable-macos-desktop
        flutter pub get

    - name: Generate app build name
      shell: bash
      run: echo "##[set-output name=name;]$(echo sweet_$GITHUB_RUN_NUMBER)"
      id: app_build

    - name: Building ${{ steps.app_build.outputs.name }} iOS
      run: flutter build ios --build-number $GITHUB_RUN_NUMBER --release --no-codesign --config-only 

    - name: Setup Ruby    
      uses: ruby/setup-ruby@v1.133.2
      with:
        bundler-cache: true
    
    - name: Build and upload to TestFlight
      run: |
        bundle install
        bundle exec fastlane ios beta
      env: 
        SWEET_MATCH_ACCESS_TOKEN: ${{ secrets.SWEET_MATCH_ACCESS_TOKEN }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}

    - name: Building ${{ steps.app_build.outputs.name }} MacOS
      run: flutter build macos --build-number $GITHUB_RUN_NUMBER --release

    - name: 'Zipping build'
      run: |
        pushd build/macos/Build/Products/Release/
        zip -r ${{ steps.app_build.outputs.name }}-macos.zip SWEET.app
        popd
        mv build/macos/Build/Products/Release/${{ steps.app_build.outputs.name }}-macos.zip ./${{ steps.app_build.outputs.name }}-macos.zip

    - name: 'Uploading artifact'
      uses: actions/upload-artifact@v2.2.3
      with:
        name: ${{ steps.app_build.outputs.name }}-macos
        path: ${{ steps.app_build.outputs.name }}-macos.zip
        retention-days: 5

  job-android:
    runs-on: ubuntu-latest
    env:
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}

    steps:
    - uses: actions/checkout@v2
      with:
        lfs: 'true'
    - uses: actions/setup-java@v1
      with:
        java-version: '12.x'

    - uses: subosito/flutter-action@v2.6.1
      with:
        channel: 'stable'
        architecture: x64

    - name: Update dependencies
      run: flutter pub get

    - name: Generate app build name
      shell: bash
      run: echo "##[set-output name=name;]$(echo sweet_$GITHUB_RUN_NUMBER)"
      id: app_build

    - name: Building ${{ steps.app_build.outputs.name }}.aab
      run: flutter build appbundle --build-number $GITHUB_RUN_NUMBER --release --flavor prod

    - name: Setup Ruby    
      uses: ruby/setup-ruby@v1.133.2
      with:
        bundler-cache: true
    
    - name: Upload to Play Store    
      run: |
        bundle install --jobs 4 --retry 3
        bundle exec fastlane android upload_playstore
      env: 
        SWEET_JSON_KEY_DATA: ${{ secrets.SWEET_JSON_KEY_DATA }}
        AAB_PATH: build/app/outputs/bundle/prodRelease/app-prod-release.aab

  upload-release-firebase:
    needs: [job-linux, job-apple, job-windows]
    runs-on: ubuntu-latest

    steps:

    - name: Generate app build name
      shell: bash
      run: echo "##[set-output name=name;]$(echo sweet_$GITHUB_RUN_NUMBER)"
      id: app_build

    - name: 'Download Linux artifact'
      uses: actions/download-artifact@v2.0.9
      with:
        name: ${{ steps.app_build.outputs.name }}-linux

    - name: 'Download MacOS artifact'
      uses: actions/download-artifact@v2.0.9
      with:
        name: ${{ steps.app_build.outputs.name }}-macos

    - name: 'Download Windows artifact'
      uses: actions/download-artifact@v2.0.9
      with:
        name: ${{ steps.app_build.outputs.name }}-windows      
    
    - name: Upload releases to Firebase Storage
      uses: actions-hub/gcloud@307.0.0
      env:
        # allow unsecure commands add-path and set-env until v8 is available
        # see: https://github.com/gabrielfalcao/pyenv-action/issues/99
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      with:
        args: cp ${{ steps.app_build.outputs.name }}-*.zip gs://eve-echoes-tool-5474b.appspot.com/releases/
        cli: gsutil 

  upload-release-s3:
    needs: [job-linux, job-apple, job-windows]
    runs-on: ubuntu-latest

    steps:

    - name: Generate app build name
      shell: bash
      run: echo "##[set-output name=name;]$(echo sweet_$GITHUB_RUN_NUMBER)"
      id: app_build

    - name: 'Download Linux artifact'
      uses: actions/download-artifact@v2.0.9
      with:
        name: ${{ steps.app_build.outputs.name }}-linux

    - name: 'Download MacOS artifact'
      uses: actions/download-artifact@v2.0.9
      with:
        name: ${{ steps.app_build.outputs.name }}-macos

    - name: 'Download Windows artifact'
      uses: actions/download-artifact@v2.0.9
      with:
        name: ${{ steps.app_build.outputs.name }}-windows      


    - name: Upload Windows releases to S3
      uses: qoqa/action-s3-cp@v1.1
      env:
        AWS_S3_BUCKET: ${{ secrets.AWS_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        FILE: './${{ steps.app_build.outputs.name }}-windows.zip'
        AWS_S3_PATH: '/releases/${{ steps.app_build.outputs.name }}-windows.zip'

    - name: Upload MacOS releases to S3
      uses: qoqa/action-s3-cp@v1.1
      env:
        AWS_S3_BUCKET: ${{ secrets.AWS_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        FILE: './${{ steps.app_build.outputs.name }}-macos.zip'
        AWS_S3_PATH: '/releases/${{ steps.app_build.outputs.name }}-macos.zip'

    - name: Upload Linux releases to S3
      uses: qoqa/action-s3-cp@v1.1
      env:
        AWS_S3_BUCKET: ${{ secrets.AWS_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        FILE: './${{ steps.app_build.outputs.name }}-linux.zip'
        AWS_S3_PATH: '/releases/${{ steps.app_build.outputs.name }}-linux.zip'

  upload-release-pages:
    needs: [job-linux, job-apple, job-windows]
    runs-on: ubuntu-latest

    steps:
    
    - name: Update dependencies
      run: | 
        sudo apt-get update -y
        sudo apt-get install -y rename

    - name: Generate app build name
      shell: bash
      run: echo "##[set-output name=name;]$(echo sweet_$GITHUB_RUN_NUMBER)"
      id: app_build
        
    - uses: actions/checkout@v2
      with:
        lfs: 'true'   

    - name: 'Download Linux artifact'
      uses: actions/download-artifact@v2.0.9
      with:
        name: ${{ steps.app_build.outputs.name }}-linux

    - name: 'Download MacOS artifact'
      uses: actions/download-artifact@v2.0.9
      with:
        name: ${{ steps.app_build.outputs.name }}-macos

    - name: 'Download Windows artifact'
      uses: actions/download-artifact@v2.0.9
      with:
        name: ${{ steps.app_build.outputs.name }}-windows

    - name: Capture tag version
      shell: bash
      run: |
        TAG=$(sed -n -e '/version: / s///p' pubspec.yaml | tr -d '\r\n' | sed -E -e 's/((([0-9])+\.([0-9])+\.([0-9])+)\+(([0-9])+))/\2+$GITHUB_RUN_NUMBER/')
        echo "Tag will be $TAG"
        echo "##[set-output name=tag;]$(echo $TAG)"
      id: app_tag
    
    - name: Commit changes
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add .
        git commit -m "Update release files"
        git tag ${{ steps.app_tag.outputs.tag }}

    - name: Push SWEET changes
      uses: ad-m/github-push-action@v0.6.0
      with:
        github_token: ${{ secrets.SWEET_PAT }}
        branch: 'main'
        tags: true

